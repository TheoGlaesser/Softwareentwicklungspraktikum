#pragma once
#include <QGraphicsSceneMouseEvent>
#include <QMainWindow>
#include <QGraphicsScene>
#include <QGraphicsEllipseItem>
#include <QGraphicsLineItem>
#include <QPointF>
#include <vector>
#include <QLabel>
#include <QMessageBox>



struct force {
  QPointF point;
  qreal betrag;
  qreal winkel;
};



class forceGraphicsItem : public QGraphicsItem {
  Q_OBJECT
public:  
  forceGraphicsItem() : forceLineItem(nullptr), forcePolygonItem(nullptr) {}
  forceGraphicsItem(const forceGraphicsItem& other)
  {
    forceLineItem = new QGraphicsLineItem(other.forceLineItem);
    forcePolygonItem = new QGraphicsPolygonItem(other.forcePolygonItem);
  }
  forceGraphicsItem(QGraphicsLineItem* line, QGraphicsPolygonItem* polygon) : forceLineItem(line), forcePolygonItem(polygon)
  {
    forceLineItem->setParentItem(this);
    forcePolygonItem->setParentItem(this);
  }
  ~forceGraphicsItem()
  {
    if(forceLineItem != nullptr) delete forceLineItem;
    if(forcePolygonItem != nullptr) delete forcePolygonItem;
  }
  forceGraphicsItem& operator=(const forceGraphicsItem& other) 
  {
    if(forceLineItem != nullptr) delete forceLineItem;
    if(forcePolygonItem != nullptr) delete forcePolygonItem;
    forceLineItem = new QGraphicsLineItem(other.forceLineItem);
    forcePolygonItem = new QGraphicsPolygonItem(other.forcePolygonItem);
    return *this;
  }

  void mouseDoubleClickEvent(QGraphicsSceneMouseEvent *event) override {
    if (isSelected()) {
      showInformationBox(event);
    }
  }

  QRectF boundingRect() const override
  {
    return forcePolygonItem->boundingRect();
  }
 
  void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget = nullptr) override
  {
    return; 
  }


private:
  void showInformationBox(QGraphicsSceneMouseEvent *event) {
    // Get the current position of the item (center of the ellipse)
      QPointF itemPos = this->pos();

      QMessageBox *infoLabel = new QMessageBox;
      infoLabel->setInformativeText("Node");
      infoLabel->setText("x-Koordinate: " + QVariant(itemPos.x()).toString() + "\n" + "y-Koordinate: " + QVariant(itemPos.y()).toString());

      infoLabel->show();
    }

public:
  QGraphicsLineItem* forceLineItem;
  QGraphicsPolygonItem* forcePolygonItem;
};




/*class Node : public QGraphicsEllipseItem {
public:
    Node(QPointF position, QGraphicsItem* parent = nullptr)
        : QGraphicsEllipseItem(parent), isMoving(false), currentLine(nullptr) {
        setRect(-10, -10, 20, 20);  // Set node size as 20x20 circle
        setBrush(Qt::blue);
        setPos(position);
        setFlag(QGraphicsItem::ItemIsMovable);
        setFlag(QGraphicsItem::ItemSendsGeometryChanges);
    }



    void mouseDoubleClickEvent(QGraphicsSceneMouseEvent* event) override {
        // Add new node on double click
        QPointF position = event->scenePos();
        Node* node = new Node(position);
        addItem(node);
    }


    void mousePressEvent(QGraphicsSceneMouseEvent* event) override {
        QGraphicsEllipseItem::mousePressEvent(event);
        if (event->button() == Qt::LeftButton) {
            isMoving = true;
        } else if (event->button() == Qt::RightButton) {
            // Start connecting nodes
            startPosition = this->pos();
            currentLine = new QGraphicsLineItem(QLineF(startPosition, startPosition));
            currentLine->setPen(QPen(Qt::black, 2));
            scene()->addItem(currentLine);
        }
    }

    void mouseMoveEvent(QGraphicsSceneMouseEvent* event) override {
        QGraphicsEllipseItem::mouseMoveEvent(event);
        if (isMoving) {
            // Move node logic
            setPos(event->scenePos());
        } else if (currentLine) {
            // Drag line while connecting
            QLineF newLine(startPosition, event->scenePos());
            currentLine->setLine(newLine);
        }
    }

    void mouseReleaseEvent(QGraphicsSceneMouseEvent* event) override {
        QGraphicsEllipseItem::mouseReleaseEvent(event);
        if (isMoving) {
            isMoving = false;
        } else if (currentLine) {
            // Finish connecting nodes
            QPointF endPosition = event->scenePos();
            QList<QGraphicsItem*> itemsAtEnd = scene()->items(endPosition);

            // Check if the mouse was released over another node
            for (QGraphicsItem* item : itemsAtEnd) {
                Node* otherNode = dynamic_cast<Node*>(item);
                if (otherNode && otherNode != this) {
                    // Connect the two nodes
                    QLineF finalLine(startPosition, otherNode->pos());
                    currentLine->setLine(finalLine);
                    currentLine = nullptr;
                    return;
                }
            }

            // If not over another node, remove the line
            scene()->removeItem(currentLine);
            delete currentLine;
            currentLine = nullptr;
        }
    }

private:
    bool isMoving;
    QPointF startPosition;
    QGraphicsLineItem* currentLine;
};



class NodeScene : public QGraphicsScene {
public:
    NodeScene(QObject* parent = nullptr) : QGraphicsScene(parent) {}

    void mouseDoubleClickEvent(QGraphicsSceneMouseEvent* event) override {
        // Add new node on double click
        QPointF position = event->scenePos();
        Node* node = new Node(position);
        addItem(node);
    }
};
*/


//Subclass QGraphicsEllipseItem to represent a selectable "point"
class nodeGraphicsItem : public QGraphicsEllipseItem {
  Q_OBJECT
public:
    nodeGraphicsItem(const QPointF &point)
        : QGraphicsEllipseItem(point.x() - 4, point.y() - 4, 2 * 4, 2 * 4), currentLine(nullptr), isMoving(false), isLining(false) {
        setFlags(QGraphicsItem::ItemIsSelectable);  // Allow the point to be selectable
        setBrush(Qt::black);  // Fill the point with a color
    }

protected:
    // Override the mousePressEvent to handle selection
    void mouseDoubleClickEvent(QGraphicsSceneMouseEvent *event) override {
        QGraphicsEllipseItem::mousePressEvent(event);
        if (isSelected()) {
            showInformationBox(event);
        }
    }


    void mousePressEvent(QGraphicsSceneMouseEvent* event) override {
        // QGraphicsEllipseItem::mousePressEvent(event);
        if (event->button() == Qt::LeftButton) {
            isMoving = true;
        } else if (event->button() == Qt::RightButton) {
            isLining = true;
            startPosition = this->rect().center();
        }
    }


    void mouseMoveEvent(QGraphicsSceneMouseEvent* event) override {
        // QGraphicsEllipseItem::mouseMoveEvent(event);
        if (isMoving) {
            // Move node logic
            //setPos(event->scenePos());
        } else if (isLining) {
            // Drag line while connecting
            if(currentLine != nullptr) delete currentLine;
            currentLine = nullptr;
            QLineF newLine(startPosition, event->scenePos());
            currentLine = scene()->addLine(newLine);
        }
    }


    void mouseReleaseEvent(QGraphicsSceneMouseEvent* event) override {
        // QGraphicsEllipseItem::mouseReleaseEvent(event);
        if (isLining) {
            // Finish connecting nodes
            QPointF endPosition = event->scenePos();
            QList<QGraphicsItem*> itemsAtEnd = scene()->items(endPosition);

            // Check if the mouse was released over another node
            for (QGraphicsItem* item : itemsAtEnd) {
                nodeGraphicsItem* otherNode = dynamic_cast<nodeGraphicsItem*>(item);
                if (otherNode && otherNode != this) {
                    // Connect the two nodes
                    QLineF finalLine(startPosition, otherNode->rect().center());
                    scene()->addLine(finalLine);

                    if(currentLine != nullptr) delete currentLine;
                    currentLine = nullptr;
                    break;
                }
            }
            if(currentLine != nullptr) delete currentLine;
            currentLine = nullptr;

        }
        isMoving = false;
        isLining = false;
   }



private:
    // Display an information box next to the item when selected
    void showInformationBox(QGraphicsSceneMouseEvent *event) {
        // Get the current position of the item (center of the ellipse)
        QPointF itemPos = this->rect().center() + this->pos();

        QMessageBox *infoLabel = new QMessageBox;
        infoLabel->setInformativeText("Node");
        infoLabel->setText("x-Koordinate: " + QVariant(itemPos.x()).toString() + "\n" + "y-Koordinate: " + QVariant(itemPos.y()).toString());

        infoLabel->show();
    }

    bool isMoving;
    bool isLining;
    QPointF startPosition;
    QGraphicsLineItem* currentLine;
};



struct resultGraphicsItems {
    std::vector<nodeGraphicsItem*> nodeItems;
    std::vector<QGraphicsLineItem*> lineItems;
    std::vector<forceGraphicsItem> forceGraphicsItems;
    std::vector<QGraphicsPolygonItem*> supportItems; 
};


